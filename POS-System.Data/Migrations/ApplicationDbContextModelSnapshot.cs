// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using POS_System.Data.Database;

#nullable disable

namespace POS_System.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("POS_System.Data.Identity.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("POS_System.Data.Identity.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("Version")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            BirthDate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "N3J7G6F5D4C3B2A1O0N3P2L1K0J9I8H7G6F5D4C3B2A1",
                            Email = "johndoe@example.com",
                            EmailConfirmed = true,
                            EmployeeId = 1,
                            FirstName = "John",
                            IsDeleted = false,
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "johndoe@example.com",
                            NormalizedUserName = "johndoe",
                            PasswordHash = "AQAAAAEAACcQAAAAEL7rWl6+6gQmXvT4XvH8z9FV3WzQX1lKoHkxJ7F5oF+U4T5RrH3RrQbV9T8M2Q1O0N3P2L1K0J9I8H7G6F5D4C3B2A1",
                            PhoneNumber = "3463466346",
                            PhoneNumberConfirmed = true,
                            RoleId = 0,
                            SecurityStamp = "N3J7G6F5D4C3B2A1O0N3P2L1K0J9I8H7G6F5D4C3B2A1",
                            StartDate = new DateOnly(1, 1, 1),
                            TwoFactorEnabled = false,
                            UserName = "johndoe",
                            Version = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            BirthDate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "N3J7G6F5D4C3B2A1O0N3P2L1K0J9I8H7G6F5D4C3B2A1",
                            Email = "janedoe@example.com",
                            EmailConfirmed = true,
                            EmployeeId = 2,
                            FirstName = "Jane",
                            IsDeleted = false,
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "janedoe@example.com",
                            NormalizedUserName = "janedoe",
                            PasswordHash = "AQAAAAEAACcQAAAAEL7rWl6+6gQmXvT4XvH8z9FV3WzQX1lKoHkxJ7F5oF+U4T5RrH3RrQbV9T8M2Q1O0N3P2L1K0J9I8H7G6F5D4C3B2A1",
                            PhoneNumber = "77567455",
                            PhoneNumberConfirmed = true,
                            RoleId = 1,
                            SecurityStamp = "N3J7G6F5D4C3B2A1O0N3P2L1K0J9I8H7G6F5D4C3B2A1",
                            StartDate = new DateOnly(1, 1, 1),
                            TwoFactorEnabled = false,
                            UserName = "janedoe",
                            Version = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            BirthDate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "N3J7G6F5D4C3B2A1O0N3P2L1K0J9I8H7G6F5D4C3B2A1",
                            Email = "adamsmith@example.com",
                            EmailConfirmed = true,
                            EmployeeId = 3,
                            FirstName = "Adam",
                            IsDeleted = false,
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "adamsmith@example.com",
                            NormalizedUserName = "adamsmith",
                            PasswordHash = "AQAAAAEAACcQAAAAEL7rWl6+6gQmXvT4XvH8z9FV3WzQX1lKoHkxJ7F5oF+U4T5RrH3RrQbV9T8M2Q1O0N3P2L1K0J9I8H7G6F5D4C3B2A1",
                            PhoneNumber = "4352335255",
                            PhoneNumberConfirmed = true,
                            RoleId = 2,
                            SecurityStamp = "N3J7G6F5D4C3B2A1O0N3P2L1K0J9I8H7G6F5D4C3B2A1",
                            StartDate = new DateOnly(1, 1, 1),
                            TwoFactorEnabled = false,
                            UserName = "adamsmith",
                            Version = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            BirthDate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "N3J7G6F5D4C3B2A1O0N3P2L1K0J9I8H7G6F5D4C3B2A1",
                            Email = "bobjohnson@example.com",
                            EmailConfirmed = true,
                            EmployeeId = 4,
                            FirstName = "Bob",
                            IsDeleted = false,
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "bobjohnson@example.com",
                            NormalizedUserName = "bobjohnson",
                            PasswordHash = "AQAAAAEAACcQAAAAEL7rWl6+6gQmXvT4XvH8z9FV3WzQX1lKoHkxJ7F5oF+U4T5RrH3RrQbV9T8M2Q1O0N3P2L1K0J9I8H7G6F5D4C3B2A1",
                            PhoneNumber = "24142141241",
                            PhoneNumberConfirmed = true,
                            RoleId = 3,
                            SecurityStamp = "N3J7G6F5D4C3B2A1O0N3P2L1K0J9I8H7G6F5D4C3B2A1",
                            StartDate = new DateOnly(1, 1, 1),
                            TwoFactorEnabled = false,
                            UserName = "bobjohnson",
                            Version = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            BirthDate = new DateOnly(1, 1, 1),
                            ConcurrencyStamp = "N3J7G6F5D4C3B2A1O0N3P2L1K0J9I8H7G6F5D4C3B2A1",
                            Email = "johndoe@example.com",
                            EmailConfirmed = true,
                            EmployeeId = 1,
                            FirstName = "Johnson",
                            IsDeleted = false,
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "johndoe@example.com",
                            NormalizedUserName = "johnsondoe",
                            PasswordHash = "AQAAAAEAACcQAAAAEL7rWl6+6gQmXvT4XvH8z9FV3WzQX1lKoHkxJ7F5oF+U4T5RrH3RrQbV9T8M2Q1O0N3P2L1K0J9I8H7G6F5D4C3B2A1",
                            PhoneNumber = "546646564",
                            PhoneNumberConfirmed = true,
                            RoleId = 4,
                            SecurityStamp = "N3J7G6F5D4C3B2A1O0N3P2L1K0J9I8H7G6F5D4C3B2A1",
                            StartDate = new DateOnly(1, 1, 1),
                            TwoFactorEnabled = false,
                            UserName = "johnsondoe",
                            Version = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("POS_System.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CartDiscountId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EmployeeVersionId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartDiscountId");

                    b.HasIndex("EmployeeVersionId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeVersionId = 1,
                            IsDeleted = false,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeVersionId = 2,
                            IsDeleted = false,
                            Status = 2
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeVersionId = 3,
                            IsDeleted = false,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeVersionId = 4,
                            IsDeleted = false,
                            Status = 0
                        });
                });

            modelBuilder.Entity("POS_System.Domain.Entities.CartDiscount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("boolean");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CartDiscounts");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsProduct")
                        .HasColumnType("boolean");

                    b.Property<int?>("ProductVersionId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int?>("ServiceVersionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CartId = 1,
                            IsDeleted = false,
                            IsProduct = true,
                            ProductVersionId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 2,
                            CartId = 1,
                            IsDeleted = false,
                            IsProduct = false,
                            Quantity = 1,
                            ServiceVersionId = 1
                        },
                        new
                        {
                            Id = 3,
                            CartId = 2,
                            IsDeleted = false,
                            IsProduct = true,
                            ProductVersionId = 2,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 4,
                            CartId = 2,
                            IsDeleted = false,
                            IsProduct = true,
                            ProductVersionId = 3,
                            Quantity = 10
                        });
                });

            modelBuilder.Entity("POS_System.Domain.Entities.EmployeeOnService", b =>
                {
                    b.Property<int>("EmployeeVersionId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceVersionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("EmployeeVersionId", "ServiceVersionId", "StartDate");

                    b.HasIndex("ServiceVersionId");

                    b.ToTable("EmployeeOnServices");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.GiftCard", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("GiftCards");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.ItemDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("boolean");

                    b.Property<int>("ItemDiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemDiscountId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("ItemDiscountId"), 1L, null, null, null, null, null);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Version")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("ItemDiscounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Desc1",
                            IsDeleted = true,
                            IsPercentage = true,
                            ItemDiscountId = 1,
                            Value = 12,
                            Version = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Description = "Desc2",
                            EndDate = new DateTime(2025, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsPercentage = true,
                            ItemDiscountId = 2,
                            Value = 15,
                            Version = new DateTime(2024, 12, 16, 13, 31, 49, 459, DateTimeKind.Utc).AddTicks(6292)
                        },
                        new
                        {
                            Id = 3,
                            Description = "Desc3",
                            EndDate = new DateTime(2025, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsPercentage = false,
                            ItemDiscountId = 3,
                            StartDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 500,
                            Version = new DateTime(2024, 12, 16, 13, 31, 49, 459, DateTimeKind.Utc).AddTicks(6298)
                        },
                        new
                        {
                            Id = 4,
                            Description = "Desc1 Update",
                            IsDeleted = true,
                            IsPercentage = true,
                            ItemDiscountId = 1,
                            Value = 18,
                            Version = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("POS_System.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("ProductId"), 1L, null, null, null, null, null);

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Version")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "P1 desc",
                            ImageURL = "",
                            IsDeleted = true,
                            Name = "Product1",
                            Price = 1099,
                            ProductId = 1,
                            Stock = 10,
                            Version = new DateTime(2024, 10, 1, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Description = "P2 desc",
                            ImageURL = "",
                            IsDeleted = true,
                            Name = "Product2",
                            Price = 199,
                            ProductId = 2,
                            Stock = 5,
                            Version = new DateTime(2024, 10, 15, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Description = "P1 v2 desc",
                            ImageURL = "",
                            IsDeleted = true,
                            Name = "Product1 v2",
                            Price = 1099,
                            ProductId = 1,
                            Stock = 15,
                            Version = new DateTime(2024, 10, 5, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Description = "P1 v2 desc",
                            ImageURL = "",
                            IsDeleted = false,
                            Name = "Product1 v3",
                            Price = 599,
                            ProductId = 1,
                            Stock = 7,
                            Version = new DateTime(2024, 11, 1, 17, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("POS_System.Domain.Entities.ProductModification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("ProductModificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductModificationId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("ProductModificationId"), 1L, null, null, null, null, null);

                    b.Property<int>("ProductVersionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Version")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductVersionId");

                    b.ToTable("ProductModifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "decs1",
                            IsDeleted = true,
                            Name = "Extra cheese",
                            Price = 99,
                            ProductModificationId = 1,
                            ProductVersionId = 1,
                            Version = new DateTime(2024, 10, 1, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Description = "decs1",
                            IsDeleted = false,
                            Name = "Extra cheese v2",
                            Price = 100,
                            ProductModificationId = 1,
                            ProductVersionId = 1,
                            Version = new DateTime(2024, 11, 1, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Description = "decs1",
                            IsDeleted = true,
                            Name = "No cheese",
                            Price = 0,
                            ProductModificationId = 2,
                            ProductVersionId = 1,
                            Version = new DateTime(2024, 11, 2, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Description = "decs1",
                            IsDeleted = false,
                            Name = "No cheese v2",
                            Price = 0,
                            ProductModificationId = 2,
                            ProductVersionId = 1,
                            Version = new DateTime(2024, 11, 3, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Description = "decs1",
                            IsDeleted = false,
                            Name = "Extra fork",
                            Price = 50,
                            ProductModificationId = 3,
                            ProductVersionId = 2,
                            Version = new DateTime(2024, 11, 4, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("POS_System.Domain.Entities.ProductModificationOnCartItem", b =>
                {
                    b.Property<int>("LeftEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("RightEntityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("LeftEntityId", "RightEntityId", "StartDate");

                    b.HasIndex("LeftEntityId")
                        .IsUnique();

                    b.HasIndex("RightEntityId");

                    b.ToTable("ProductModificationOnCartItems");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.ProductOnItemDiscount", b =>
                {
                    b.Property<int>("LeftEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("RightEntityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("LeftEntityId", "RightEntityId", "StartDate");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ProductOnItemDiscounts");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.ProductOnTax", b =>
                {
                    b.Property<int>("LeftEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("RightEntityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("LeftEntityId", "RightEntityId", "StartDate");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ProductOnTax");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServiceId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("ServiceId"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("Version")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "S1 desc",
                            Duration = 45,
                            ImageURL = "",
                            IsDeleted = false,
                            Name = "Service1",
                            Price = 2599,
                            ServiceId = 1,
                            Version = new DateTime(2024, 10, 16, 19, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Description = "S2 desc",
                            Duration = 25,
                            ImageURL = "",
                            IsDeleted = true,
                            Name = "Service2",
                            Price = 4599,
                            ServiceId = 2,
                            Version = new DateTime(2024, 10, 18, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Description = "S3 desc",
                            Duration = 10,
                            ImageURL = "",
                            IsDeleted = true,
                            Name = "Service3",
                            Price = 1699,
                            ServiceId = 3,
                            Version = new DateTime(2024, 10, 19, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Description = "S2 v2 desc",
                            Duration = 40,
                            ImageURL = "",
                            IsDeleted = false,
                            Name = "Service2 v2",
                            Price = 4099,
                            ServiceId = 2,
                            Version = new DateTime(2024, 11, 1, 15, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("POS_System.Domain.Entities.ServiceOnItemDiscount", b =>
                {
                    b.Property<int>("LeftEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("RightEntityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("LeftEntityId", "RightEntityId", "StartDate");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ServiceOnItemDiscounts");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.ServiceOnTax", b =>
                {
                    b.Property<int>("LeftEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("RightEntityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("LeftEntityId", "RightEntityId", "StartDate");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ServiceOnTax");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.ServiceReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BookingTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CartItemId")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("TimeSlotId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartItemId")
                        .IsUnique();

                    b.HasIndex("TimeSlotId")
                        .IsUnique();

                    b.ToTable("ServiceReservations");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<int>("TaxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaxId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("TaxId"), 1L, null, null, null, null, null);

                    b.Property<DateTime>("Version")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Taxes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = true,
                            IsPercentage = true,
                            Name = "Tax1",
                            Rate = 5,
                            TaxId = 1,
                            Version = new DateTime(2024, 11, 1, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            IsPercentage = true,
                            Name = "Tax2",
                            Rate = 10,
                            TaxId = 2,
                            Version = new DateTime(2024, 11, 1, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = true,
                            IsPercentage = false,
                            Name = "Tax3",
                            Rate = 299,
                            TaxId = 3,
                            Version = new DateTime(2024, 11, 1, 16, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            IsPercentage = false,
                            Name = "Tax1 v2",
                            Rate = 199,
                            TaxId = 1,
                            Version = new DateTime(2024, 11, 1, 20, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("POS_System.Domain.Entities.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeVersionId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeVersionId");

                    b.ToTable("TimeSlots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeVersionId = 1,
                            IsAvailable = true,
                            StartTime = new DateTime(2024, 12, 16, 13, 31, 49, 459, DateTimeKind.Utc).AddTicks(6170)
                        },
                        new
                        {
                            Id = 2,
                            EmployeeVersionId = 1,
                            IsAvailable = true,
                            StartTime = new DateTime(2024, 12, 16, 13, 31, 49, 459, DateTimeKind.Utc).AddTicks(6180)
                        },
                        new
                        {
                            Id = 3,
                            EmployeeVersionId = 2,
                            IsAvailable = false,
                            StartTime = new DateTime(2024, 12, 16, 13, 31, 49, 459, DateTimeKind.Utc).AddTicks(6183)
                        },
                        new
                        {
                            Id = 4,
                            EmployeeVersionId = 3,
                            IsAvailable = true,
                            StartTime = new DateTime(2024, 12, 16, 13, 31, 49, 459, DateTimeKind.Utc).AddTicks(6186)
                        });
                });

            modelBuilder.Entity("POS_System.Domain.Entities.Transaction", b =>
                {
                    b.Property<DateTime>("Id")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("CartId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("Tip")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionRef")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("POS_System.Data.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("POS_System.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("POS_System.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("POS_System.Data.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS_System.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("POS_System.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("POS_System.Domain.Entities.Cart", b =>
                {
                    b.HasOne("POS_System.Domain.Entities.CartDiscount", "CartDiscount")
                        .WithMany("Carts")
                        .HasForeignKey("CartDiscountId");

                    b.HasOne("POS_System.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("EmployeeVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartDiscount");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("POS_System.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.EmployeeOnService", b =>
                {
                    b.HasOne("POS_System.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("EmployeeVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS_System.Domain.Entities.Service", "Service")
                        .WithMany("EmployeeOnServices")
                        .HasForeignKey("ServiceVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.ProductModification", b =>
                {
                    b.HasOne("POS_System.Domain.Entities.Product", "Product")
                        .WithMany("ProductModifications")
                        .HasForeignKey("ProductVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.ProductModificationOnCartItem", b =>
                {
                    b.HasOne("POS_System.Domain.Entities.ProductModification", "LeftEntity")
                        .WithOne("ProductModificationOnCartItems")
                        .HasForeignKey("POS_System.Domain.Entities.ProductModificationOnCartItem", "LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS_System.Domain.Entities.CartItem", "RightEntity")
                        .WithMany("ProductModificationsOnCartItem")
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.ProductOnItemDiscount", b =>
                {
                    b.HasOne("POS_System.Domain.Entities.Product", "LeftEntity")
                        .WithMany("ProductOnItemDiscounts")
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS_System.Domain.Entities.ItemDiscount", "RightEntity")
                        .WithMany("ProductOnItemDiscounts")
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.ProductOnTax", b =>
                {
                    b.HasOne("POS_System.Domain.Entities.Product", "LeftEntity")
                        .WithMany("ProductOnTaxes")
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS_System.Domain.Entities.Tax", "RightEntity")
                        .WithMany("ProductOnTaxes")
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.ServiceOnItemDiscount", b =>
                {
                    b.HasOne("POS_System.Domain.Entities.Service", "LeftEntity")
                        .WithMany("ServiceOnItemDiscounts")
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS_System.Domain.Entities.ItemDiscount", "RightEntity")
                        .WithMany("ServiceOnItemDiscounts")
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.ServiceOnTax", b =>
                {
                    b.HasOne("POS_System.Domain.Entities.Service", "LeftEntity")
                        .WithMany("ServiceOnTaxes")
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS_System.Domain.Entities.Tax", "RightEntity")
                        .WithMany("ServiceOnTaxes")
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.ServiceReservation", b =>
                {
                    b.HasOne("POS_System.Domain.Entities.CartItem", "CartItem")
                        .WithOne("ServiceReservation")
                        .HasForeignKey("POS_System.Domain.Entities.ServiceReservation", "CartItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("POS_System.Domain.Entities.TimeSlot", "TimeSlot")
                        .WithOne("ServiceReservation")
                        .HasForeignKey("POS_System.Domain.Entities.ServiceReservation", "TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CartItem");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.TimeSlot", b =>
                {
                    b.HasOne("POS_System.Data.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("EmployeeVersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("POS_System.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("POS_System.Domain.Entities.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.CartDiscount", b =>
                {
                    b.Navigation("Carts");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.CartItem", b =>
                {
                    b.Navigation("ProductModificationsOnCartItem");

                    b.Navigation("ServiceReservation")
                        .IsRequired();
                });

            modelBuilder.Entity("POS_System.Domain.Entities.ItemDiscount", b =>
                {
                    b.Navigation("ProductOnItemDiscounts");

                    b.Navigation("ServiceOnItemDiscounts");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductModifications");

                    b.Navigation("ProductOnItemDiscounts");

                    b.Navigation("ProductOnTaxes");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.ProductModification", b =>
                {
                    b.Navigation("ProductModificationOnCartItems")
                        .IsRequired();
                });

            modelBuilder.Entity("POS_System.Domain.Entities.Service", b =>
                {
                    b.Navigation("EmployeeOnServices");

                    b.Navigation("ServiceOnItemDiscounts");

                    b.Navigation("ServiceOnTaxes");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.Tax", b =>
                {
                    b.Navigation("ProductOnTaxes");

                    b.Navigation("ServiceOnTaxes");
                });

            modelBuilder.Entity("POS_System.Domain.Entities.TimeSlot", b =>
                {
                    b.Navigation("ServiceReservation")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
